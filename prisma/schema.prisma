// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions
// Try Prisma Accelerate https//pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model testimonial {
  id          Int      @id @default(autoincrement())
  name        String
  image       String
  description String
  stars       Int
  linkedInUrl String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model course {
  id              Int    @id @default(autoincrement())
  title           String
  slug            String @unique
  description     String
  originalPrice   Float
  discountPrice   Float
  image           String
  language        String
  rating          Float
  ratingCount     Int
  instructorName  String
  instructorImage String

  chapters  Chapter[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

//  Course Chapter Model 

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String  @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData?

  courseId Int
  course   course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

//  Mux model for processing video data

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

// UserProgress model

model UserProgress {
  id     String
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model projectFeedback {
  id           Int      @id @default(autoincrement())
  name         String
  image        String
  description  String
  linkedInUrl  String
  projectImage String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model project {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String
  image       String
  topic       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// model user {
//   id        Int      @id @default(autoincrement())
//   name      String
//   email     String   @unique
//   image     String
//   password  String
//   role      String   @default("user")
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model purchase {
  id          String   @id @default(uuid())
  studentName String
  courseName  String
  date        DateTime
}

model CourseDetail {
  id       String  @id @default(uuid())
  title    String
  content  String
  content2 String?
  content3 String?
  content4 String?
  content5 String?
  content6 String?
  time     String
  time2    String?
  time3    String?
  time4    String?
  time5    String?
  time6    String?
  mins     Int
  Sections Int
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
